import React, {useEffect, useState} from "react";
import {
  Alert,
  Box,
  Button,
  CircularProgress,
  Container,
  Grid,
  Paper,
  Typography,
} from "@mui/material";
import {Link as RouterLink} from "react-router-dom";
import {useNavigate} from "react-router-dom";
import eventApi from "../api/eventApi";
import heroImg from "../assets/hero.jpg";
import EventCard from "../components/EventCard";

export default function Home() {
  const navigate = useNavigate();
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null); // Th√™m state cho l·ªói

  useEffect(() => {
    const fetchEvents = async () => {
      try {
        setLoading(true); // B·∫Øt ƒë·∫ßu loading
        setError(null);   // Reset l·ªói
        // L·∫•y trang ƒë·∫ßu, 3 s·ª± ki·ªán ƒë√£ duy·ªát, m·ªõi nh·∫•t (th√™m tham s·ªë)
        const res = await eventApi.getAll({
          page: 0,
          size: 3,
          status: 'approved',
          sort: 'createdAt,desc'
        });

        // *** S·ª¨A L·ªñI ·ªû ƒê√ÇY ***
        // API tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng Page, m·∫£ng s·ª± ki·ªán n·∫±m trong 'content'
        const eventsArray = res.data.content;

        // Ki·ªÉm tra xem eventsArray c√≥ ph·∫£i l√† m·∫£ng kh√¥ng
        if (Array.isArray(eventsArray)) {
          setEvents(eventsArray); // API ƒë√£ gi·ªõi h·∫°n size=3, kh√¥ng c·∫ßn slice
        } else {
          console.error("D·ªØ li·ªáu s·ª± ki·ªán kh√¥ng ph·∫£i m·∫£ng:", res.data);
          setEvents([]); // ƒê·∫∑t th√†nh m·∫£ng r·ªóng n·∫øu d·ªØ li·ªáu sai
          setError("Kh√¥ng th·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu s·ª± ki·ªán nh·∫≠n ƒë∆∞·ª£c."); // Th√¥ng b√°o l·ªói
        }
      } catch (err) {
        console.error("Kh√¥ng th·ªÉ t·∫£i s·ª± ki·ªán:", err);
        setError("ƒê√£ x·∫£y ra l·ªói khi t·∫£i s·ª± ki·ªán n·ªïi b·∫≠t."); // Set l·ªói
      } finally {
        setLoading(false); // K·∫øt th√∫c loading
      }
    };
    fetchEvents();
  }, []); // Dependency r·ªóng ƒë·ªÉ ch·ªâ ch·∫°y 1 l·∫ßn khi mount

  return (
      <Box>
        {/* HERO (Gi·ªØ nguy√™n) */}
        <Box
            sx={{
              height: "70vh",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              backgroundImage: `url(${heroImg})`,
              backgroundSize: "cover",
              backgroundPosition: "center",
              color: "white",
              textAlign: "center",
              position: "relative",
              "&::before": {
                content: '""',
                position: "absolute",
                inset: 0,
                backgroundColor: "rgba(0,0,0,0.5)",
              },
            }}
        >
          <Box sx={{position: "relative", zIndex: 2}}>
            <Typography variant="h3" fontWeight="bold" gutterBottom>
              K·∫øt n·ªëi tr√°i tim ‚Äì Lan t·ªèa y√™u th∆∞∆°ng ‚ù§Ô∏è
            </Typography>
            <Typography variant="h6" sx={{mb: 3}}>
              Tham gia c·ªông ƒë·ªìng t√¨nh nguy·ªán l·ªõn nh·∫•t Vi·ªát Nam
            </Typography>
            <Button
                variant="contained"
                color="secondary"
                size="large"
                onClick={() => navigate("/events")}
            >
              Kh√°m ph√° s·ª± ki·ªán
            </Button>
          </Box>
        </Box>

        {/* WHY CHOOSE US (Gi·ªØ nguy√™n) */}
        <Container maxWidth="lg" sx={{mt: 8}}>
          <Typography
              variant="h4"
              align="center"
              fontWeight="bold"
              gutterBottom
              color="primary"
          >
            V√¨ sao ch·ªçn Volunteer Hub?
          </Typography>
          <Grid
              container
              spacing={4}
              sx={{
                mt: 2,
                display: "grid",
                gridTemplateColumns: {
                  xs: "1fr",      // mobile: 1 c·ªôt
                  sm: "1fr 1fr",  // tablet tr·ªü l√™n: 2 c·ªôt
                },
                gap: 4,           // kho·∫£ng c√°ch gi·ªØa c√°c √¥
                justifyItems: "center",
                alignItems: "stretch",
              }}
          >
            {[
              {
                title: "K·∫øt n·ªëi c·ªông ƒë·ªìng",
                desc: "T·∫°o c·∫ßu n·ªëi gi·ªØa nh·ªØng ng∆∞·ªùi c√≥ c√πng ƒëam m√™ gi√∫p ƒë·ª° x√£ h·ªôi."
              },
              {
                title: "C∆° h·ªôi tr·∫£i nghi·ªám",
                desc: "Tham gia c√°c ho·∫°t ƒë·ªông th·ª±c t·∫ø ƒë·∫ßy √Ω nghƒ©a v√† s√°ng t·∫°o."
              },
              {
                title: "Ph√°t tri·ªÉn b·∫£n th√¢n",
                desc: "R√®n luy·ªán k·ªπ nƒÉng l√†m vi·ªác nh√≥m, l√£nh ƒë·∫°o v√† qu·∫£n l√Ω d·ª± √°n."
              },
              {
                title: "Lan t·ªèa y√™u th∆∞∆°ng",
                desc: "G√≥p ph·∫ßn mang l·∫°i ni·ªÅm vui v√† hy v·ªçng cho nh·ªØng ho√†n c·∫£nh kh√≥ khƒÉn."
              },
            ].map((item, i) => (
                <Paper
                    key={i}
                    elevation={6}
                    sx={{
                      width: "100%",
                      minHeight: 200,
                      p: 4,
                      borderRadius: 4,
                      textAlign: "center",
                      display: "flex",
                      flexDirection: "column",
                      justifyContent: "center",
                      alignItems: "center",
                      transition: "0.3s",
                      "&:hover": {transform: "translateY(-5px)", boxShadow: 8,},
                    }}
                >
                  <Typography variant="h6" fontWeight="bold" gutterBottom>
                    {item.title}
                  </Typography>
                  <Typography variant="body1" color="text.secondary" sx={{
                    wordWrap: "break-word",
                    overflowWrap: "break-word",
                    whiteSpace: "normal",
                    textAlign: "center",
                    display: "-webkit-box",
                    WebkitLineClamp: 3,
                    WebkitBoxOrient: "vertical",
                    overflow: "hidden",
                  }}>
                    {item.desc}
                  </Typography>
                </Paper>
            ))}
          </Grid>
        </Container>

        {/* S·ª∞ KI·ªÜN N·ªîI B·∫¨T */}
        <Container maxWidth="lg" sx={{mt: 8, mb: 10}}>
          <Typography
              variant="h4"
              align="center"
              fontWeight="bold"
              gutterBottom
              color="primary"
          >
            S·ª± ki·ªán n·ªïi b·∫≠t üåü
          </Typography>

          {loading ? (
              <Box display="flex" justifyContent="center" mt={4}>
                <CircularProgress/>
              </Box>
          ) : error ? (
              <Alert severity="error" sx={{mt: 4}}>{error}</Alert>
          ) : events.length > 0 ? (
              <>
                <Grid container spacing={4} sx={{mt: 2}}>
                  {events.map((event) => (
                      <Grid xs={12} sm={6} md={4} key={event.id}>
                        <EventCard event={event} showOrganizerName={true}/>
                      </Grid>
                  ))}
                </Grid>
                {/* N√∫t xem th√™m */}
                <Box textAlign="center" mt={4}>
                  <Button variant="outlined" component={RouterLink}
                          to="/events">
                    Xem t·∫•t c·∫£ s·ª± ki·ªán
                  </Button>
                </Box>
              </>
          ) : (
              <Typography align="center" sx={{mt: 4}}>
                Hi·ªán ch∆∞a c√≥ s·ª± ki·ªán n√†o ƒë∆∞·ª£c duy·ªát.
              </Typography>
          )}
        </Container>
      </Box>
  );
}