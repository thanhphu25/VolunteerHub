import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import * as yup from "yup";
import authApi from "../api/authApi";

// Schema yup (gi·ªØ nguy√™n)
const schema = yup.object({
    fullName: yup.string().required("Vui l√≤ng nh·∫≠p t√™n c·ªßa b·∫°n"),
    email: yup.string().email("Email kh√¥ng h·ª£p l·ªá").required("Email l√† b·∫Øt bu·ªôc"),
    phone: yup.string().matches(/^[0-9]{9,11}$/, "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá").required("Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"),
    password: yup.string().min(6, "M·∫≠t kh·∫©u t·ªëi thi·ªÉu 6 k√Ω t·ª±").required("M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc"),
    confirmPassword: yup.string().oneOf([yup.ref("password")], "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp").required("Vui l√≤ng nh·∫≠p l·∫°i m·∫≠t kh·∫©u"),
    role: yup.string().oneOf(["volunteer", "organizer", "admin"]),
});

function Register() {
    const { register, handleSubmit, formState: { errors } } = useForm({
        resolver: yupResolver(schema),
    });

    const [loading, setLoading] = useState(false);
    const [message, setMessage] = useState("");
    const [fieldErrors, setFieldErrors] = useState({}); // validation errors from backend

    const onSubmit = async (data) => {
        setFieldErrors({});
        setMessage("");
        setLoading(true);

        try {
            // Chu·∫©n b·ªã payload theo field backend mong ƒë·ª£i
            const payload = {
                fullName: data.fullName,
                email: data.email,
                phone: data.phone,
                password: data.password,
                role: data.role || "volunteer",
            };

            console.log("‚û°Ô∏è Sending payload:", payload);

            // G·ªçi API qua authApi (axiosClient ƒë√£ c·∫•u h√¨nh baseURL)
            const res = await authApi.register(payload);

            // N·∫øu th√†nh c√¥ng: res.data c√≥ th·ªÉ ch·ª©a th√¥ng tin user / message
            console.log("‚úÖ Server response:", res.data);
            setMessage(res.data?.message || "üéâ ƒêƒÉng k√Ω th√†nh c√¥ng!");
        } catch (err) {
            console.error("‚ùå L·ªói ƒëƒÉng k√Ω:", err);

            // N·∫øu backend tr·∫£ response (validation, duplicate email, ...)
            if (err.response) {
                console.error("Status:", err.response.status);
                console.error("Response data:", err.response.data);

                const data = err.response.data;

                // N·∫øu backend tr·∫£ object errors theo rule { errors: { email: [...], password: [...] } }
                if (data?.errors && typeof data.errors === "object") {
                    setFieldErrors(data.errors);
                    // Build user-friendly message
                    const firstErrField = Object.keys(data.errors)[0];
                    const firstErrMsg = Array.isArray(data.errors[firstErrField])
                        ? data.errors[firstErrField][0]
                        : data.errors[firstErrField];
                    setMessage(firstErrMsg || "ƒêƒÉng k√Ω th·∫•t b·∫°i do l·ªói d·ªØ li·ªáu");
                } else if (data?.message) {
                    setMessage(data.message);
                } else {
                    setMessage("ƒêƒÉng k√Ω th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!");
                }
            } else {
                // Kh√¥ng c√≥ response: network / CORS
                console.error("No response from server. Possible network/CORS issue.");
                setMessage("Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c t·ªõi server. Ki·ªÉm tra server/CORS.");
            }
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-100">
            <div className="bg-white shadow-md rounded-lg p-8 w-full max-w-md">
                <h2 className="text-2xl font-bold text-center mb-6 text-indigo-600">
                    VolunteerHub - ƒêƒÉng k√Ω
                </h2>

                <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
                    <div>
                        <label className="block font-medium mb-1">H·ªç v√† t√™n</label>
                        <input {...register("fullName")} type="text"
                               className="w-full border border-gray-300 p-2 rounded focus:ring focus:ring-indigo-200"
                               placeholder="Nh·∫≠p h·ªç t√™n c·ªßa b·∫°n"/>
                        <p className="text-red-500 text-sm">{errors.fullName?.message || fieldErrors.fullName?.join?.(", ") || fieldErrors.name?.join?.(", ")}</p>
                    </div>

                    <div>
                        <label className="block font-medium mb-1">Email</label>
                        <input {...register("email")} type="email"
                               className="w-full border border-gray-300 p-2 rounded focus:ring focus:ring-indigo-200"
                               placeholder="Nh·∫≠p email"/>
                        <p className="text-red-500 text-sm">{errors.email?.message || fieldErrors.email?.join?.(", ")}</p>
                    </div>

                    <div>
                        <label className="block font-medium mb-1">S·ªë ƒëi·ªán tho·∫°i</label>
                        <input {...register("phone")} type="text"
                               className="w-full border border-gray-300 p-2 rounded focus:ring focus:ring-indigo-200"
                               placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"/>
                        <p className="text-red-500 text-sm">{errors.phone?.message || fieldErrors.phone?.join?.(", ")}</p>
                    </div>

                    <div>
                        <label className="block font-medium mb-1">M·∫≠t kh·∫©u</label>
                        <input {...register("password")} type="password"
                               className="w-full border border-gray-300 p-2 rounded focus:ring focus:ring-indigo-200"
                               placeholder="Nh·∫≠p m·∫≠t kh·∫©u"/>
                        <p className="text-red-500 text-sm">{errors.password?.message || fieldErrors.password?.join?.(", ")}</p>
                    </div>

                    <div>
                        <label className="block font-medium mb-1">X√°c nh·∫≠n m·∫≠t kh·∫©u</label>
                        <input {...register("confirmPassword")} type="password"
                               className="w-full border border-gray-300 p-2 rounded focus:ring focus:ring-indigo-200"
                               placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"/>
                        <p className="text-red-500 text-sm">{errors.confirmPassword?.message}</p>
                    </div>

                    <div>
                        <label className="block font-medium mb-1">Vai tr√≤</label>
                        <select {...register("role")} className="w-full border border-gray-300 p-2 rounded focus:ring focus:ring-indigo-200" defaultValue="volunteer">
                            <option value="volunteer">T√¨nh nguy·ªán vi√™n</option>
                            <option value="organizer">Ng∆∞·ªùi t·ªï ch·ª©c</option>
                            <option value="admin">Qu·∫£n tr·ªã vi√™n</option>
                        </select>
                    </div>

                    <button type="submit" disabled={loading} className="w-full bg-indigo-600 text-white py-2 rounded hover:bg-indigo-700 transition">
                        {loading ? "ƒêang x·ª≠ l√Ω..." : "ƒêƒÉng k√Ω"}
                    </button>
                </form>

                {message && (
                    <p className={`mt-4 text-center font-semibold ${message.includes("th√†nh c√¥ng") ? "text-green-600" : "text-red-500"}`}>
                        {message}
                    </p>
                )}
            </div>
        </div>
    );
}

export default Register;
